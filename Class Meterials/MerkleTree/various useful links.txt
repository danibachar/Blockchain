https://chrispacia.wordpress.com/2013/09/02/bitcoin-mining-explained-like-youre-five-part-1-incentives/

https://chrispacia.wordpress.com/2013/09/02/bitcoin-mining-explained-like-youre-five-part-2-mechanics/

(part 3)
https://chrispacia.wordpress.com/2013/09/07/bitcoin-cryptography-digital-signatures-explained/

https://chrispacia.wordpress.com/2013/09/29/bitcoin-explained-like-youre-five-part-4-securing-your-wallet/

https://chrispacia.wordpress.com/2014/02/08/bitcoin-explained-like-youre-five-part-5-macroeconomics/

https://chrispacia.wordpress.com/2013/09/07/bitcoin-cryptography-digital-signatures-explained/

Mastering Bitcoin:
http://chimera.labs.oreilly.com/books/1234000001802
The Blockchain:
http://chimera.labs.oreilly.com/books/1234000001802/ch07.html


Mastering Bitcoin
http://chimera.labs.oreilly.com/books/1234000001802

Holochain:
http://ceptr.org/projects/holochain
https://github.com/metacurrency/holochain

Merkle Trees:

Inserting / updating:
http://crypto.stackexchange.com/questions/22669/merkle-hash-tree-updates
http://bitcoin.stackexchange.com/questions/51423/how-do-you-create-a-merkle-tree-that-lets-you-insert-and-delete-elements-without/51424

Verifying transaction:

http://bitcoin.stackexchange.com/questions/10479/what-is-the-merkle-root


http://stackoverflow.com/questions/5486304/explain-merkle-trees-for-use-in-eventual-consistency

Merkle trees limit the amount of data transferred when synchronizing. The general assumptions are:

1. Network I/O is more expensive than local I/O + computing the hashes.
2. Transferring the entire sorted key space is more expensive than progressively limiting the comparison over several steps.
3. The key spaces have fewer discrepancies than similarities.

A Merkle Tree exchange would look like this:

1. Start with the root of the tree (a list of one hash value).
2. The origin sends the list of hashes at the current level.
3. The destination diffs the list of hashes against its own and then requests subtrees that are different. If there are no differences, the request can terminate.
4. Repeat steps 2 and 3 until leaf nodes are reached.
5. The origin sends the values of the keys in the resulting set.

In the typical case, the complexity of synchronizing the key spaces will be log(N). Yes, at the extreme, where there are no keys in common, the operation will be equivalent to sending the entire sorted list of hashes, O(N). 

One could amortize the expense of building Merkle trees by building them dynamically as writes come in and keeping the serialized form on disk.

Transactions and signing:

https://bitcoin.org/en/developer-guide#transactions

Merkle root is not used to verify the integrity of transactions in block

Ethereum

https://blog.ethereum.org/2015/11/15/merkling-in-ethereum/

Merkle Proof:

A Merkle proof consists of a chunk, the root hash of the tree, and the “branch” consisting of all of the hashes going up along the path from the chunk to the root. Someone reading the proof can verify that the hashing, at least for that branch, is consistent going all the way up the tree, and therefore that the given chunk actually is at that position in the tree. The application is simple: suppose that there is a large database, and that the entire contents of the database are stored in a Merkle tree where the root of the Merkle tree is publicly known and trusted (eg. it was digitally signed by enough trusted parties, or there is a lot of proof of work on it). Then, a user who wants to do a key-value lookup on the database (eg. “tell me the object in position 85273”) can ask for a Merkle proof, and upon receiving the proof verify that it is correct, and therefore that the value received actually is at position 85273 in the database with that particular root. It allows a mechanism for authenticating a small amount of data, like a hash, to be extended to also authenticate large databases of potentially unbounded size.

---------

https://www.quora.com/Cryptography-How-does-a-Merkle-proof-actually-work

A Merkle tree is just an efficient way to prove that something is in a set, without having to store the set. Each non leaf node of a Merkle tree is just the hash of the concatenation of it's children. Each of the leaves are the set we want to prove membership for. In a sense, the root of the Merkle tree is a digest of all of the elements in the data set. Say person A contains the root node of the Merkle tree for set S, and person B wants to convince person A that element E is in S. To do this, person B only has to provide person A with the siblings of all of the elements in the tree in the path from E to the root node. This is only log(n) nodes. So B only has to provide only log(n) pieces of data, and person A only has to store the root node. With this provided information, person A can recompute the root node of the tree, and check to make sure that it matches the one that he knows is correct. If the hash function is collision resistant, then he can be sure that E is in S.

----------

instead of downloading every transaction and every block, a “light client” can only download the chain of block headers, 80-byte chunks of data for each block that contain only five things:

A hash of the previous header
A timestamp
A mining difficulty value
A proof of work nonce
A root hash for the Merkle tree containing the transactions for that block.

If the light client wants to determine the status of a transaction, it can simply ask for a Merkle proof showing that a particular transaction is in one of the Merkle trees whose root is in a block header for the main chain.

Consistency Proof and Audit Proof

https://www.certificate-transparency.org/log-proofs-work

Non-membership proofs:

http://crypto.stackexchange.com/questions/31914/proof-of-non-membership-on-a-merkle-tree
http://www.links.org/files/RevocationTransparency.pdf

zero knowledge sets:

https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Zero%20Knowledge/Zero-Knowledge_Sets.pdf

----------

Scripts:

http://chimera.labs.oreilly.com/books/1234000001802/ch05.html#tx_script

----------

Implementations (very helpful)

https://github.com/NebulousLabs/merkletree

pycoin:

https://github.com/richardkiss/pycoin

------------

Why use Merkle Trees?

https://brilliant.org/wiki/merkle-tree/

In various distributed and peer-to-peer systems, data verification is very important. This is because the same data exists in multiple locations. So, if a piece of data is changed in one location, it's important that data is changed everywhere. Data verification is used to make sure data is the same everywhere.

However, it is time consuming and computationally expensive to check the entirety of each file whenever a system wants to verify data. So, this why Merkle trees are used. Basically, we want to limit the amount of data being sent over a network (like the Internet) as much as possible. So, instead of sending an entire file over the network, we just send a hash of the file to see if it matches. The protocol goes like this:

Computer A sends a hash of the file to computer B.
Computer B checks that hash against the root of the Merkle tree.
If there is no difference, we're done! Otherwise, go to step 4.
If there is a difference in a single hash, computer B will request the roots of the two subtrees of that hash.
Computer A creates the necessary hashes and sends them back to computer B.
Repeat steps 4 and 5 until you've found the data blocks(s) that are inconsistent. It's possible to find more than one data block that is wrong because there might be more than one error in the data.
Note that each time a hash is found to match, we need  more comparisons at the next level, where  is the branching factor of the tree.

This algorithm is predicated on the assumption that network I/O takes longer than local I/O to perform hashes. This is especially true because computers can run in parallel, calculating multiple hashes at once.

Because the computers are only sending hashes over the network (not the entire file), this process can go very quickly. Plus, if an inconsistent piece of data is found, it's much easier to insert a small chunk of fixed data then to completely rewrite the entire file to fix the issue.

The reason that Merkle trees are useful in distributed systems is that it is inefficient to check the entirety of file to check for issues. The reason that merkle trees are useful in peer-to-peer systems is that they help you verify information, even if some of it come from an untrusted source (which is a concern in peer-to-peer systems).

The way that Merkle trees can be helpful in a peer-to-peer system has to do with trust. Before you download a file from a peer-to-peer source - like Tor - the root hash is obtained from a trusted source. After that, you can obtain lower nodes of the Merkle tree from untrusted peers. All of these nodes exist in the same tree-like structure described above, and they all are partial representations of the same data. The nodes from untrusted sources are checked against the trusted hash. If they match the trusted source (meaning they fit into the same merkle tree), they are accepted and the process continue. If they are no good, they are discarded and searched for again from a different source.

Merkle trees can be used to check for inconsitencies in more than just files and basic data structures like the blockchain. Apache Cassandra and other NoSQL systems use Merkle trees to detect inconsistencies between replicas of entire databases.

http://bitcoin.stackexchange.com/questions/10696/what-is-the-benefit-of-using-a-merkle-root-rather-than-simply-hashing-all-of-the

Verify that a transaction exists in a block:

To see how it simplifies verification, consider that in order to verify a transaction T is part of the blockchain, the verifier has to get from the transaction hash to the merkle root. If there are n transaction, there are log_2(n) levels to climb in the merkle tree, so to speak. To climb from the transaction T's hash to its parent P, we only need its sibling, since that is how the tree is built. Then to climb the next level we only need the sibling of the parent we calculated P, and so forth.

To climb all log_2(n) levels of the tree we only need T's hash plus log_2(n) extra hashes (including the merkle root). If we did a linear concatenation of blocks, we would need much more information than log_2(n) << n

https://en.bitcoin.it/wiki/Merged_mining_specification#Merkle_Branch

Now she wants to prove to Bob that a given hash (#10) was part of that tree, but Bob doesn't have the full tree (only the public root; hash #0). Alice can send Bob all the hashes she used to make the tree in the first place (hashes #7-#14, total of 7 extra hashes), so Bob can build the whole tree to verify the root is the same, but that's rather data-intensive. Instead, she could give Bob hashes #9, #3, and #2 (one from each level of the tree, working #10 back to the root). Without Bob knowing the structure of the tree, Alice also has to tell Bob what order to apply the hashes in (since hash(#9, #10) == #4, but hash(#10, #9) != #4). So Alice tells Bob "left, left, right" to indicate which operand #9, #3, and #2 are, respectively. That can be encoded as a bitmask and take up very little data to transmit. So, instead of transmitting 7 hashes to Bob, Alice transmits 3 hashes and a bitmask. The data savings get even more pronounced if the merkle tree gets even bigger.

http://distributeddatastore.blogspot.com/2013/07/cassandra-using-merkle-trees-to-detect.html

Cassandra's AntiEntropy service uses Merkle trees to detect the inconsistencies in data between replicas. Merkle tree is a hash tree where leaves contain hashes of individual data blocks and parent nodes contain hashes of their respective children. It provides an efficient way to find differences in data blocks stored on replicas and reduces the amount of data transferred to compare the data blocks. 

Cassandra's implementation of Merkle tree (org.apache.cassandra.utils.MerkleTree) uses perfect binary tree where each leaf contains the hash of a row value and each parent node contains hash of its right and left child. In a perfect binary tree all the leaves are at the same level or at same depth. A perfect binary tree of depth h contains 2^h leaves. In other terms if a range contains n tokens then the Merkle tree representing it contains log(n) levels. 

When nodetool repair command is executed, the target node specified with -h option in the command, coordinates the repair of each column family in each keyspace. A repair coordinator node requests Merkle tree from each replica for a specific token range to compare them. Each replica builds a Merkle tree by scanning the data stored locally in the requested token range. The repair coordinator node compares the Merkle trees and finds all the sub token ranges that differ between the replicas and repairs data in those ranges.

Two Merkle trees are compared if both of them cover the same token range regardless of their size. The trees are compared recursively starting at root hash. If root hashes match in both the trees then all the data blocks in the tree's token range are consistent between replicas.  If  root hashes disagree, then the left child hashes are compared followed next by right child hashes. The comparison proceeds until all the token ranges that differ between the two trees are calculated.

--------------

Thoughts:

As the "client", you're downloading a large file, say 10GB, spread across peers in chuncks of 4096 bytes.

You need a trusted authority server to tell you whether each block is valid.

From the server, you can be given the root hash and, as each block comes in, you start
filling in the Merkle tree yourself.  

However, you'll need all the data downloaded before you can complete the tree to verify the root.

Instead, you can ask the server to send you the path of a hashed chunk (the leaf) to the root hash and verify it yourself.  This enables you to verify each chunk and if it is faulty, request it from somewhere else, simultaneously while you are downloading other chunks.  Furthermore, you're not maintaining all the hashes of the chunks and building the entire Merkle tree yourself.  So it's faster for verifying a chunk, and it's less memory on your part to hold the entire Merkle tree.

The server (as trusted authority) doesn't hold the data, but it has to have the Merkle tree, including leaf hashes.

Q1: Why not just ask the server if the leaf exists in tree with the specific root?
Q2: Why should the server even bother with storing a Merkle tree of the leaf hashes?  (see answer to Q4 as well)

A1: You could do that, but the SHA256 hash is only 32 bytes, and while this represents a huge number of unique hashes (2^256), 1.15*10^77, hashing node pair hashes as we walk up the tree strongly validates that the hash under question belongs to the correct tree.

A2: Data synchronization:

Let's say you have a large dataset divided into small chuncks.  First, you may not be maintaining the entire dataset, but only the portion you are responsible for.  If a change occurs in that chunk, you can recalculate the root hash knowing only the left-right branches to the root.

The side-effect to this is that you also only need to maintain the left-right branches for your chunks, rather than the entire Merkle tree (including all the leaf hashes of chunks that you don't know or care about.)

To synchronize, another user asks you to verify your root hash against their root hash.  If different, the left/right child hashes are requested, and the process iterates the mismatches until the chunks on your end that have changed are identified.  Now you only send your changed chunk to the other user, and you are both synchronized again.

Q3: What happens if more than one user modifies the same chunk (based on the idea that in a distributed system, you want to replicate the data across many peers for resiliency.)

A1: Only one peer may have the authority to change the data
A2: Hashes can be time stamped, and you accept only the most recent change, discarding anything else
A3: Differences are merged (either automatically or requiring manual intervention.)
A4: You accept only the oldest change, and discard anything more recent
A5: Technically, a chunk should never be changed.  If a change is required, this should be logged as a new transaction so that there is an auditable trail of changes (not the same think as a Merkle audit).  Given that, only specified authorities should be allowed to modify a transaction.
A6: Some sort of blocking mechanism might be used to prevent data from being modified simultaneously.  For example, you could be given a "change key" and when you submit the change, if your change key doesn't match the current change key, your change is rejected, requiring you to syncrhonize your data, acquire a new change key, and submit your changes again.
A7: The salient point to this is that, if the chunk sizes are small, the likelihood that your change will collide with someone else's is small.

Q4: Why should the server send you the hash audit trail of to verify a chunk, rather than just sending you a "yes/no" response?

A: This is your way of verifying that the server hasn't been compromised -- if it simply said "yes", how would you know you can trust it?  By sending you the left-right hashes, the server is telling you "here is how I verified your request."  A server that is trying to get you to believe your chunk has is valid cannot send you "any" audit trail hash because that would give a different root hash.

